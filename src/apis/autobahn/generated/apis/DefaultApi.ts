/* tslint:disable */
/* eslint-disable */
/**
 * Autobahn App API
 * Was passiert auf Deutschlands Bundesstraßen? API für aktuelle Verwaltungsdaten zu Baustellen, Staus und Ladestationen. Außerdem Zugang zu Verkehrsüberwachungskameras und vielen weiteren Datensätzen. 
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Closure,
  Closures,
  ElectricChargingStation,
  ElectricChargingStations,
  ParkingLorries,
  ParkingLorry,
  Roads,
  Roadwork,
  Roadworks,
  Warning,
  Warnings,
  Webcam,
  Webcams,
} from '../models';
import {
    ClosureFromJSON,
    ClosureToJSON,
    ClosuresFromJSON,
    ClosuresToJSON,
    ElectricChargingStationFromJSON,
    ElectricChargingStationToJSON,
    ElectricChargingStationsFromJSON,
    ElectricChargingStationsToJSON,
    ParkingLorriesFromJSON,
    ParkingLorriesToJSON,
    ParkingLorryFromJSON,
    ParkingLorryToJSON,
    RoadsFromJSON,
    RoadsToJSON,
    RoadworkFromJSON,
    RoadworkToJSON,
    RoadworksFromJSON,
    RoadworksToJSON,
    WarningFromJSON,
    WarningToJSON,
    WarningsFromJSON,
    WarningsToJSON,
    WebcamFromJSON,
    WebcamToJSON,
    WebcamsFromJSON,
    WebcamsToJSON,
} from '../models';

export interface GetChargingStationRequest {
    stationId: string;
}

export interface GetClosureRequest {
    closureId: string;
}

export interface GetParkingLorryRequest {
    lorryId: string;
}

export interface GetRoadworkRequest {
    roadworkId: string;
}

export interface GetWarningRequest {
    warningId: string;
}

export interface GetWebcamRequest {
    webcamId: string;
}

export interface ListChargingStationsRequest {
    roadId: string;
}

export interface ListClosuresRequest {
    roadId: string;
}

export interface ListParkingLorriesRequest {
    roadId: string;
}

export interface ListRoadworksRequest {
    roadId: string;
}

export interface ListWarningsRequest {
    roadId: string;
}

export interface ListWebcamsRequest {
    roadId: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Gibt Details zu einer konkreten Ladestation zurück.
     * Details zu einer Ladestation
     */
    async getChargingStationRaw(requestParameters: GetChargingStationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ElectricChargingStation>> {
        if (requestParameters.stationId === null || requestParameters.stationId === undefined) {
            throw new runtime.RequiredError('stationId','Required parameter requestParameters.stationId was null or undefined when calling getChargingStation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/details/electric_charging_station/{stationId}`.replace(`{${"stationId"}}`, encodeURIComponent(String(requestParameters.stationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ElectricChargingStationFromJSON(jsonValue));
    }

    /**
     * Gibt Details zu einer konkreten Ladestation zurück.
     * Details zu einer Ladestation
     */
    async getChargingStation(requestParameters: GetChargingStationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ElectricChargingStation> {
        const response = await this.getChargingStationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gibt Details zu einer konkreten Sperrung zurück.
     * Details zu einer Sperrung
     */
    async getClosureRaw(requestParameters: GetClosureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Closure>> {
        if (requestParameters.closureId === null || requestParameters.closureId === undefined) {
            throw new runtime.RequiredError('closureId','Required parameter requestParameters.closureId was null or undefined when calling getClosure.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/details/closure/{closureId}`.replace(`{${"closureId"}}`, encodeURIComponent(String(requestParameters.closureId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClosureFromJSON(jsonValue));
    }

    /**
     * Gibt Details zu einer konkreten Sperrung zurück.
     * Details zu einer Sperrung
     */
    async getClosure(requestParameters: GetClosureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Closure> {
        const response = await this.getClosureRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gibt Details eines konkreten Rastplatzes zurück.
     * Details eines Rastplatzes
     */
    async getParkingLorryRaw(requestParameters: GetParkingLorryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ParkingLorry>> {
        if (requestParameters.lorryId === null || requestParameters.lorryId === undefined) {
            throw new runtime.RequiredError('lorryId','Required parameter requestParameters.lorryId was null or undefined when calling getParkingLorry.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/details/parking_lorry/{lorryId}`.replace(`{${"lorryId"}}`, encodeURIComponent(String(requestParameters.lorryId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ParkingLorryFromJSON(jsonValue));
    }

    /**
     * Gibt Details eines konkreten Rastplatzes zurück.
     * Details eines Rastplatzes
     */
    async getParkingLorry(requestParameters: GetParkingLorryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ParkingLorry> {
        const response = await this.getParkingLorryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gibt Details zu einer konkreten Baustelle zurück.
     * Details einer Baustelle
     */
    async getRoadworkRaw(requestParameters: GetRoadworkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Roadwork>> {
        if (requestParameters.roadworkId === null || requestParameters.roadworkId === undefined) {
            throw new runtime.RequiredError('roadworkId','Required parameter requestParameters.roadworkId was null or undefined when calling getRoadwork.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/details/roadworks/{roadworkId}`.replace(`{${"roadworkId"}}`, encodeURIComponent(String(requestParameters.roadworkId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoadworkFromJSON(jsonValue));
    }

    /**
     * Gibt Details zu einer konkreten Baustelle zurück.
     * Details einer Baustelle
     */
    async getRoadwork(requestParameters: GetRoadworkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Roadwork> {
        const response = await this.getRoadworkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gibt Details zu einer konkreten Verkehrsmeldung zurück.
     * Details zu einer Verkehrsmeldung
     */
    async getWarningRaw(requestParameters: GetWarningRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Warning>> {
        if (requestParameters.warningId === null || requestParameters.warningId === undefined) {
            throw new runtime.RequiredError('warningId','Required parameter requestParameters.warningId was null or undefined when calling getWarning.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/details/warning/{warningId}`.replace(`{${"warningId"}}`, encodeURIComponent(String(requestParameters.warningId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WarningFromJSON(jsonValue));
    }

    /**
     * Gibt Details zu einer konkreten Verkehrsmeldung zurück.
     * Details zu einer Verkehrsmeldung
     */
    async getWarning(requestParameters: GetWarningRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Warning> {
        const response = await this.getWarningRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gibt Details einer konkreten Webcam zurück.
     * Details einer Webcam
     */
    async getWebcamRaw(requestParameters: GetWebcamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Webcam>> {
        if (requestParameters.webcamId === null || requestParameters.webcamId === undefined) {
            throw new runtime.RequiredError('webcamId','Required parameter requestParameters.webcamId was null or undefined when calling getWebcam.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/details/webcam/{webcamId}`.replace(`{${"webcamId"}}`, encodeURIComponent(String(requestParameters.webcamId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebcamFromJSON(jsonValue));
    }

    /**
     * Gibt Details einer konkreten Webcam zurück.
     * Details einer Webcam
     */
    async getWebcam(requestParameters: GetWebcamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Webcam> {
        const response = await this.getWebcamRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gibt eine Liste der verfügbaren Autobahnen zurück.
     * Liste verfügbarer Autobahnen
     */
    async listAutobahnenRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Roads>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoadsFromJSON(jsonValue));
    }

    /**
     * Gibt eine Liste der verfügbaren Autobahnen zurück.
     * Liste verfügbarer Autobahnen
     */
    async listAutobahnen(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Roads> {
        const response = await this.listAutobahnenRaw(initOverrides);
        return await response.value();
    }

    /**
     * Gibt eine Liste der Ladestationen zu einer Autobahn zurück.
     * Liste aktueller Ladestationen
     */
    async listChargingStationsRaw(requestParameters: ListChargingStationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ElectricChargingStations>> {
        if (requestParameters.roadId === null || requestParameters.roadId === undefined) {
            throw new runtime.RequiredError('roadId','Required parameter requestParameters.roadId was null or undefined when calling listChargingStations.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{roadId}/services/electric_charging_station`.replace(`{${"roadId"}}`, encodeURIComponent(String(requestParameters.roadId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ElectricChargingStationsFromJSON(jsonValue));
    }

    /**
     * Gibt eine Liste der Ladestationen zu einer Autobahn zurück.
     * Liste aktueller Ladestationen
     */
    async listChargingStations(requestParameters: ListChargingStationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ElectricChargingStations> {
        const response = await this.listChargingStationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gibt eine Liste der Sperrungen zu einer Autobahn zurück.
     * Liste aktueller Sperrungen
     */
    async listClosuresRaw(requestParameters: ListClosuresRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Closures>> {
        if (requestParameters.roadId === null || requestParameters.roadId === undefined) {
            throw new runtime.RequiredError('roadId','Required parameter requestParameters.roadId was null or undefined when calling listClosures.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{roadId}/services/closure`.replace(`{${"roadId"}}`, encodeURIComponent(String(requestParameters.roadId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClosuresFromJSON(jsonValue));
    }

    /**
     * Gibt eine Liste der Sperrungen zu einer Autobahn zurück.
     * Liste aktueller Sperrungen
     */
    async listClosures(requestParameters: ListClosuresRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Closures> {
        const response = await this.listClosuresRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gibt eine Liste der Rastplätze zu einer Autobahn zurück.
     * Liste verfügbarer Rastplätze
     */
    async listParkingLorriesRaw(requestParameters: ListParkingLorriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ParkingLorries>> {
        if (requestParameters.roadId === null || requestParameters.roadId === undefined) {
            throw new runtime.RequiredError('roadId','Required parameter requestParameters.roadId was null or undefined when calling listParkingLorries.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{roadId}/services/parking_lorry`.replace(`{${"roadId"}}`, encodeURIComponent(String(requestParameters.roadId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ParkingLorriesFromJSON(jsonValue));
    }

    /**
     * Gibt eine Liste der Rastplätze zu einer Autobahn zurück.
     * Liste verfügbarer Rastplätze
     */
    async listParkingLorries(requestParameters: ListParkingLorriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ParkingLorries> {
        const response = await this.listParkingLorriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gibt eine Liste der aktuellen Baustellen zu einer Autobahn zurück.
     * Liste aktueller Baustellen
     */
    async listRoadworksRaw(requestParameters: ListRoadworksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Roadworks>> {
        if (requestParameters.roadId === null || requestParameters.roadId === undefined) {
            throw new runtime.RequiredError('roadId','Required parameter requestParameters.roadId was null or undefined when calling listRoadworks.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{roadId}/services/roadworks`.replace(`{${"roadId"}}`, encodeURIComponent(String(requestParameters.roadId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoadworksFromJSON(jsonValue));
    }

    /**
     * Gibt eine Liste der aktuellen Baustellen zu einer Autobahn zurück.
     * Liste aktueller Baustellen
     */
    async listRoadworks(requestParameters: ListRoadworksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Roadworks> {
        const response = await this.listRoadworksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gibt eine Liste der Verkehrsmeldungen zu einer Autobahn zurück.
     * Liste aktueller Verkehrsmeldungen
     */
    async listWarningsRaw(requestParameters: ListWarningsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Warnings>> {
        if (requestParameters.roadId === null || requestParameters.roadId === undefined) {
            throw new runtime.RequiredError('roadId','Required parameter requestParameters.roadId was null or undefined when calling listWarnings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{roadId}/services/warning`.replace(`{${"roadId"}}`, encodeURIComponent(String(requestParameters.roadId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WarningsFromJSON(jsonValue));
    }

    /**
     * Gibt eine Liste der Verkehrsmeldungen zu einer Autobahn zurück.
     * Liste aktueller Verkehrsmeldungen
     */
    async listWarnings(requestParameters: ListWarningsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Warnings> {
        const response = await this.listWarningsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gibt eine Liste der Webcams zu einer Autobahn zurück.
     * Liste verfügbarer Webcams
     */
    async listWebcamsRaw(requestParameters: ListWebcamsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Webcams>> {
        if (requestParameters.roadId === null || requestParameters.roadId === undefined) {
            throw new runtime.RequiredError('roadId','Required parameter requestParameters.roadId was null or undefined when calling listWebcams.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{roadId}/services/webcam`.replace(`{${"roadId"}}`, encodeURIComponent(String(requestParameters.roadId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebcamsFromJSON(jsonValue));
    }

    /**
     * Gibt eine Liste der Webcams zu einer Autobahn zurück.
     * Liste verfügbarer Webcams
     */
    async listWebcams(requestParameters: ListWebcamsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Webcams> {
        const response = await this.listWebcamsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
